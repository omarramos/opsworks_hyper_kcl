#!/bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/java
JAVA_HOME=/usr/
BASEPATH=<%= @deploy[:deploy_to] %>/shared
CLASSPATH=jars/*:./*:.
DAEMON_OPTS="-cp ${CLASSPATH} com.amazonaws.services.kinesis.multilang.MultiLangDaemon kcl-<%= @deploy[:rails_env] %>.properties"
DAEMON_USER=deploy
NAME=java
DESC=kcl.sh

test -x $DAEMON || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

PID=$BASEPATH/pids/<%= @application %>_kcl.pid
LOG=$BASEPATH/log/kcl.log

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test > /dev/null \
		|| return 1
    start-stop-daemon --start --quiet --background --chuid $DAEMON_USER \
                --chdir $BASEPATH/scripts --make-pidfile --pidfile $PID \
                --startas /bin/bash -- -c "exec $DAEMON $DAEMON_OPTS > $LOG 2>&1" \
                || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --retry=TERM/30/KILL/5 --pidfile $PID --name $NAME
	RETVAL="$?"

	sleep 1
	return "$RETVAL"
}

case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	restart)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	status)
		status_of_proc -p $PID "$DAEMON" "$DESC" && exit 0 || exit $?
		;;
	*)
		echo "Usage: $DESC {start|stop|restart|status}" >&2
		exit 3
		;;
esac
